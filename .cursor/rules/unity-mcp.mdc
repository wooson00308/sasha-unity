---
description: unityMCP
globs: 
alwaysApply: false
---
---
description: Provides best practices and examples for using the `manage_gameobject` tool, focusing on UI and RectTransform based on past experiences.
agentRequested: true
---

# GameObject Management Tool Usage Examples (manage_gameobject)

This document records successful examples and precautions for using the `manage_gameobject` tool to create and modify GameObjects in a Unity scene, especially focusing on UI elements and `RectTransform` related tasks. The goal is to present stable methods based on past failures.

## 1. Adding UI Component to Existing Object (Acquiring RectTransform)

A regular GameObject under a Canvas might have a `Transform` instead of a `RectTransform`. UI layout work requires a `RectTransform`.

In this case, adding a **UI component** like `UnityEngine.UI.Image` to the object using the `modify` action will cause Unity to automatically create or convert it to a `RectTransform`.

**Caution:**
*   Using `search_method="by_path"` and entering the **exact hierarchy path (including spaces)** was more stable than ID search.
*   An error might occur if the UI component already exists.

**Success Example:**

```json
// Add Image component to MechInfoPanel (to ensure RectTransform)
{
  "action": "modify",
  "components_to_add": ["UnityEngine.UI.Image"],
  "search_method": "by_path",
  "target": "@UI/MainCanvas /HangarPanel/MechInfoPanel"
}
```

## 2. Modifying RectTransform Properties (Nested UI Elements)

You can modify the properties (anchors, pivot, offsets, etc.) of an object that has a `RectTransform` (e.g., after adding a UI component).

**Caution:**
*   Again, using `search_method="by_path"` with the exact path is recommended. ID search (`search_method="by_id"`) showed unstable results.
*   Use the `"RectTransform"` key inside `component_properties`, with its value being a dictionary of property names and values.

**Success Example:**

```json
// Modify MechInfoPanel's pivot
{
  "action": "modify",
  "component_properties": {
    "RectTransform": {
      "pivot": [0.5, 0.5]
    }
  },
  "search_method": "by_path",
  "target": "@UI/MainCanvas /HangarPanel/MechInfoPanel"
}
```

```json
// Fit MechInfoPanel to the left half of HangarPanel
{
  "action": "modify",
  "component_properties": {
    "RectTransform": {
      "anchorMin": [0, 0],
      "anchorMax": [0.5, 1],
      "offsetMin": [0, 0],
      "offsetMax": [0, 0],
      "pivot": [0.5, 0.5] // Explicitly setting pivot might be good practice
    }
  },
  "search_method": "by_path",
  "target": "@UI/MainCanvas /HangarPanel/MechInfoPanel"
}